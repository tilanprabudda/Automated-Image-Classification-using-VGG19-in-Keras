# -*- coding: utf-8 -*-
"""ML Python Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17gdnc6ynZvkP7yFWwusH_v1BCCsTeY9p
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import keras
from tensorflow.keras.preprocessing import image

import os
from PIL import Image

import os
import numpy as np
from PIL import Image

image_dir = '/content/drive/MyDrive/Colab Notebooks/data'
image_arrays = []

for filename in os.listdir(image_dir):
    filepath = os.path.join(image_dir, filename)
    if os.path.isfile(filepath):
        img = Image.open(filepath)
        image_arrays.append(np.array(img))

from keras.preprocessing.image import ImageDataGenerator

from keras.applications.vgg19 import VGG19 , preprocess_input , decode_predictions

train_datagen = ImageDataGenerator(zoom_range=0.5, shear_range=0.3, horizontal_flip= True, preprocessing_function=preprocess_input)

val_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)

train = train_datagen.flow_from_directory(directory="/content/drive/MyDrive/Colab Notebooks/data" , target_size=(256,256),batch_size=32)

val = val_datagen.flow_from_directory(directory="/content/drive/MyDrive/Colab Notebooks/data" , target_size=(256,256),batch_size=32)

t_img , label = train.next()

def plotImage(img_arr, label):
  for im , l in zip(img_arr , label):
    plt.figure(figsize=(5,5))
    plt.imshow(im)
    plt.show()

plotImage(t_img[:3], label[:3])

from keras.layers import Dense, Flatten
from keras.models import Model
from keras.applications.vgg19 import VGG19
import keras

base_model = VGG19(input_shape=(256,256,3), include_top=False)

for layer in base_model.layers:
  layer.trainable = False

X = Flatten()(base_model.output)

X = Dense(units=38, activation='softmax')(X)

model = Model(base_model.input, X)

model.compile(optimizer='adam' , loss= keras.losses.categorical_crossentropy , metrics=['accuracy'])

model.compile(optimizer='adam', loss= keras.losses.categorical_crossentropy , metrics=['accuracy'])

from keras.callbacks import ModelCheckpoint, EarlyStopping

es = EarlyStopping(monitor= 'val_accuracy' , min_delta=0.01 , patience=3 , verbose=1)
mc = ModelCheckpoint(filepath='best_model.h5',
                     monitor='val_accuracy',
                     min_delta=0.01 ,
                     patience=3 ,
                     verbose=1,
                     save_best_only=True)

cb = [es, mc]

model.summary()

his = model.fit(train,
                epochs=50,
                verbose=1,
                callbacks=cb,
                validation_data=val,
                validation_steps=16)